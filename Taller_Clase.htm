<!DOCTYPE html>
<html>
    <head>
        <title>Titulo</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                color: #FFFFFF;
            }
        </style>
    </head>
    <body>
        <div id="text">Titulo<br/>
            Subtitulo<br/>
            Descripción<br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>

    function init() {

        // Escena
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 40;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Crear la Grilla
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

        //Flechas
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
			
        //Cámara
        camera.position.x = 100;
        camera.position.y = 50;
        camera.position.z = 30;
        camera.lookAt(scene.position);


		
		
		function pInicial(x,y,z)
		{
			Geometria=new THREE.Geometry();
				var vertices = [[x-x,y-y,z-z], [x-x,y*y,z-z], [x*x,y*y,z-z], [x*x,y-y,z-z], [x-x,y-y,z-z],
								[x-x,y-y,z*z], [x-x,y*y,z*z], [x-x,y*y,z-z], [x*x,y-y,z*z], [x*x,y-y,z-z],[x-x,y*y,z*z],
								[x*x,y*y,z*z], [x*x,y*y,z-z], [x-x,y-y,z*z], [x*x,y-y,z*z], [x*x,y*y,z*z]];
				var largoVertice = vertices.length;
				for (i = 0; i < largoVertice; i++) {
					x = vertices[i][0];
					y = vertices[i][1];
					z = vertices[i][2];
					vector = new THREE.Vector3(x, y, z);
					Geometria.vertices.push(vector);
				}
		}
		/*
		Geometria=new THREE.Geometry();
			var vertices = [[2-2,2-2,2-2], [2-2,2*2,2-2], [2*2,2*2,2-2], [2*2,2-2,2-2], [2-2,2-2,2-2],
			 			    [2-2,2-2,2*2], [2-2,2*2,2*2], [2-2,2*2,2-2], [2*2,2-2,2*2], [2*2,2-2,2-2],[2-2,2*2,2*2],
						    [2*2,2*2,2*2], [2*2,2*2,2-2], [2-2,2-2,2*2], [2*2,2-2,2*2], [2*2,2*2,2*2]];
			var largoVertice = vertices.length;
			for (i = 0; i < largoVertice; i++) {
				x = vertices[i][0];
				y = vertices[i][1];
				z = vertices[i][2];
				vector = new THREE.Vector3(x, y, z);
				Geometria.vertices.push(vector);
			}*/

		function CarasCubo(l1)
		{
			//Creación de las Figuras
			//Cara 1
			
			Geometria=new THREE.Geometry();
			var vertices = [[l1,l1,l1-l1], [l1+(l1*3),l1,l1-l1], [l1+(l1*3),l1+(l1*3),l1-l1], [l1,l1+(l1*3),l1-l1], [l1,l1,l1-l1]];//[10,10,0], [40,10,0], [40,40,0], [10,40,0], [10,10,0]
			var largoVertice = vertices.length;
			for (i = 0; i < largoVertice; i++) {
				x = vertices[i][0];
				y = vertices[i][1];
				z = vertices[i][2];
				vector = new THREE.Vector3(x, y, z);
				Geometria.vertices.push(vector);
			}

			//Cara 2
			Geometria2=new THREE.Geometry();
			var vertices = [[l1,l1,l1+(l1*3)], [l1+(l1*3),l1,l1+(l1*3)], [l1+(l1*3),l1+(l1*3),l1+(l1*3)], [l1,l1+(l1*3),l1+(l1*3)], [l1,l1,l1+(l1*3)]];
			var largoVertice = vertices.length;
			for (i = 0; i < largoVertice; i++) {
				x = vertices[i][0];
				y = vertices[i][1];
				z = vertices[i][2];
				vector = new THREE.Vector3(x, y, z);
				Geometria.vertices.push(vector);
			}

			//Cara 3
			Geometria3=new THREE.Geometry();
			var vertices = [[l1,l1,l1-l1], [l1,l1,l1+(l1*3)], [l1+(l1*3),l1,l1+(l1*3)], [l1+(l1*3),l1,l1-l1], [l1,l1,l1-l1]];
			var largoVertice = vertices.length;
			for (i = 0; i < largoVertice; i++) {
				x = vertices[i][0];
				y = vertices[i][1];
				z = vertices[i][2];
				vector = new THREE.Vector3(x, y, z);
				Geometria.vertices.push(vector);
			}

			//Cara 4
			Geometria4=new THREE.Geometry();
			var vertices = [[l1,l1+(l1*3),l1-l1], [l1,l1+(l1*3),l1+(l1*3)], [l1+(l1*3),l1+(l1*3),l1+(l1*3)], [l1+(l1*3),l1+(l1*3),l1-l1], [l1,l1+(l1*3),l1-l1]];
			var largoVertice = vertices.length;
			for (i = 0; i < largoVertice; i++) {
				x = vertices[i][0];
				y = vertices[i][1];
				z = vertices[i][2];
				vector = new THREE.Vector3(x, y, z);
				Geometria.vertices.push(vector);
			}


			// Colores
			Material=new THREE.ParticleBasicMaterial({color:0xFF0000});


			Cara1 = new THREE.Line(Geometria,Material);
			Cara2 = new THREE.Line(Geometria2,Material);
			Cara3 = new THREE.Line(Geometria3,Material);
			Cara4 = new THREE.Line(Geometria4,Material);

			return Cara1,Cara2,Cara3,Cara4
		}

		pInicial(1,1,6)
		CarasCubo(4)

		function cubo(pInicial,CarasCubo)
		{
			
		}
        /*
	


        //Cuadrado2 = new THREE.Line(Geometria2,Material2); 
		
        // Matriz de Traslación
        var matrizT = new THREE.Matrix4();
        matrizT.set(1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 1,
                0, 0, 0, 1);

                //Cuadrado2.applyMatrix(matrizT);         

        // Matriz de Escala
        var matrizS = new THREE.Matrix4();
        matrizS.set(5, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1);

                //Cuadrado2.applyMatrix(matrizS);

        // Matriz de Rotación
        var matrizR = new THREE.Matrix4();
        var alpha = 30;
		var cs = Math.cos(alpha);
		var ss = Math.sin(alpha);

		matrizR.set(cs,  0, ss, 0,
        		0, 1, 0, 0, 
				-ss, 0, cs, 0,
				0, 0, 0, 1);	

                //Cuadrado2.applyMatrix(matrizR);

				*/
		Material=new THREE.ParticleBasicMaterial({color:0xFF0000});
		Cara1 = new THREE.Line(Geometria,Material)
        // En el documento HTML
        document.body.appendChild(renderer.domElement);

        // Agregar elementos al escenario
        //scene.add(gridHelperXZ);
	    scene.add(arrowX);	
		scene.add(arrowY);	
		scene.add(arrowZ);
        scene.add(Cara1);
        

        //scene.add(Cuadrado2);

        renderer.render(scene, camera);
    }

    init();  // otra forma: window.onload = init;

    </script>
  </body>
</html>
